/*
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/2372ccab-20da-40c3-98f7-ac189990cb8f

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  CloudLight fan;
  CloudLight led;
  CloudLight pump;
  CloudTemperatureSensor temperature;
  CloudRelativeHumidity humidity;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"
#include "DHT.h"
#include <Servo.h>

Servo myservo;  // create servo object to control a servo
// twelve servo objects can be created on most boards
int pos = 0;

#define DHTPIN D5          // D8
#define DHTTYPE DHT11     // DHT 11
#define relay_fan D4
#define LED_relay_PIN D2
#define relay_pump D3
#define servo_PIN D6

float  temp_threshold_up = 35.0;
float  temp_threshold_low = 27.0;

DHT dht(DHTPIN, DHTTYPE);

void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  dht.begin();

  pinMode(LED_relay_PIN, OUTPUT);
  pinMode(relay_fan, OUTPUT);
  pinMode(relay_pump, OUTPUT);
  myservo.attach(servo_PIN);


  //digitalWrite(relay_fan,LOW);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500);

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);

  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information youâ€™ll get.
     The default is 0 (only errors).
     Maximum is 4
  */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
}

void loop() {
  ArduinoCloud.update();
  // Your code here
  DHT_Sensor_Data();
}

/*
  Since LED is READ_WRITE variable, onLEDChange() is
  executed every time a new value is received from IoT Cloud.
*/

void DHT_Sensor_Data()
{
  float h = dht.readHumidity();
  float t = dht.readTemperature(); // or dht.readTemperature(true) for Fahrenheit

  temperature = t;
  humidity = h;

  Serial.print("Humidity (%): ");
  Serial.println(h);
  Serial.print("Temperature  (C): ");
  Serial.println(t);
  delay(1000);


   if (t>temp_threshold_up)
    {
     digitalWrite(relay_fan,LOW);
     digitalWrite(LED_relay_PIN,HIGH);
    }

    else if (t<temp_threshold_low)
    {
    digitalWrite(LED_relay_PIN,LOW);
    digitalWrite(relay_fan,HIGH);
    }

}


/*
  Since Fan is READ_WRITE variable, onFanChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onFanChange()  {
  // Add your code here to act upon Fan change

  if (fan == 0)
    digitalWrite(relay_fan, HIGH);
  else if (fan == 1)
    digitalWrite(relay_fan, LOW);

}

/*
  Since Pump is READ_WRITE variable, onPumpChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onPumpChange()  {

  if (pump == 0)
  {
    digitalWrite(relay_pump, HIGH);
    feeder_on();

  }

  else if (pump == 1)
  {
    digitalWrite(relay_pump, LOW);
    myservo.write(-150); 
  }

}



/*
  Since Led is READ_WRITE variable, onLedChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onLedChange()  {
  if (led == 1)
    digitalWrite(LED_relay_PIN, LOW);
  else
    digitalWrite(LED_relay_PIN, HIGH);
  // Add your code here to act upon Led change
}

void feeder_on() {

  for (pos = -120; pos <= 120; pos = pos + 10)
  { 
    myservo.write(pos);              // tell servo to go to position in variable 'pos'
    delay(30);                       // waits 15ms for the servo to reach the position
  }
  
  delay(2000);
  
  for (pos = 120; pos <= -120; pos = pos - 10)
    { 
      myservo.write(pos);              // tell servo to go to position in variable 'pos'
      delay(30);                       // waits 15ms for the servo to reach the position
    }
}

